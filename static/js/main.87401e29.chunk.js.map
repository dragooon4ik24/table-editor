{"version":3,"sources":["components/TableRow/TableRow.js","data/data.js","utils/utils.js","components/Modal/Modal.js","components/Table/Table.js","components/App.js","serviceWorker.js","index.js"],"names":["TableRow","name","type","color","onRemoveClick","onEditClick","className","style","backgroundColor","onClick","data","ascendingSort","el1","el2","descendingSort","Modal","state","isValidate","componentDidMount","document","addEventListener","handleDocumentEscPress","props","row","setState","componentWillUnmount","removeEventListener","evt","keyCode","onClose","handleOverlayClick","target","currentTarget","handleInputNameChange","value","prevState","handleInputTypeChange","handleColorChange","colors","hex","handleColorChangeComplete","handleSubmitButtonClick","preventDefault","onSubmit","this","title","noValidate","htmlFor","id","onChange","required","defaultValue","disableAlpha","onChangeComplete","buttonName","React","Component","Table","isSort","isModalOpen","editedRow","handleRemoveButtonClick","index","indexOf","newData","slice","splice","handleEditButtonClick","handleSaveButtonClick","localStorage","setItem","JSON","stringify","handleSortButtonClick","sort","handleOpenModal","handleCloseModal","handleSubmit","formData","newRow","push","getItem","parse","length","map","key","colSpan","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.87401e29.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './TableRow.scss'\r\n\r\nexport default function TableRow({name, type, color, onRemoveClick, onEditClick}) {\r\n  return (\r\n    <tr className=\"TableRow\">\r\n      <td>{name}</td>\r\n      <td>{type}</td>\r\n      <td>\r\n        <div className=\"TableRow-Color\" style={{backgroundColor: `${color}`}}></div>\r\n      </td>\r\n      <td className=\"TableRow-Controls\">\r\n        <button className=\"TableRow-Button TableRow-Button_edit\" type=\"button\" onClick={onEditClick}></button>\r\n        <button className=\"TableRow-Button TableRow-Button_remove\" type=\"button\" onClick={onRemoveClick}></button>\r\n      </td>\r\n    </tr>\r\n  )\r\n}\r\n","export const data = [\r\n  {name: 'name1', type: 'main', color: '#000000'},\r\n  {name: 'name2', type: 'side', color: '#f8f8f8'},\r\n  {name: 'name3', type: 'section', color: '#ff0000'},\r\n  {name: 'name4', type: 'header', color: '#ff00ff'},\r\n]\r\n","export const ascendingSort = (el1, el2) => {\r\n  if (el1.name > el2.name) {\r\n    return 1\r\n  }\r\n  if (el1.name < el2.name) {\r\n    return -1\r\n  }\r\n  return 0\r\n}\r\nexport const descendingSort = (el1, el2) => {\r\n  if (el1.name < el2.name) {\r\n    return 1\r\n  }\r\n  if (el1.name > el2.name) {\r\n    return -1\r\n  }\r\n  return 0\r\n}\r\n","import React from 'react'\r\nimport {SketchPicker} from 'react-color'\r\n\r\nimport './Modal.scss'\r\n\r\nexport default class Modal extends React.Component {\r\n  state = {\r\n    name: '',\r\n    type: 'main',\r\n    color: 'white',\r\n    isValidate: true,\r\n  }\r\n  componentDidMount = () => {\r\n    document.addEventListener('keydown', this.handleDocumentEscPress)\r\n    if (this.props.row) {\r\n      const {name, type, color} = this.props.row\r\n      this.setState({name, type, color, isValidate: true})\r\n    }\r\n  }\r\n  componentWillUnmount = () => {\r\n    document.removeEventListener('keydown', this.handleDocumentEscPress)\r\n  }\r\n  handleDocumentEscPress = (evt) => {\r\n    if (evt.keyCode === 27) {\r\n      this.props.onClose()\r\n    }\r\n  }\r\n  handleOverlayClick = (evt) => {\r\n    if (evt.target === evt.currentTarget) {\r\n      this.props.onClose()\r\n    }\r\n  }\r\n  handleInputNameChange = (evt) => {\r\n    const {value} = evt.target\r\n    this.setState((prevState) => ({...prevState, name: value}))\r\n  }\r\n  handleInputTypeChange = (evt) => {\r\n    const {value} = evt.target\r\n    this.setState((prevState) => ({...prevState, type: value}))\r\n  }\r\n  handleColorChange = (colors) => {\r\n    this.setState((prevState) => ({...prevState, color: colors.hex}))\r\n  }\r\n  handleColorChangeComplete = (colors) => {\r\n    this.setState((prevState) => ({...prevState, color: colors.hex}))\r\n  }\r\n  handleSubmitButtonClick = (evt) => {\r\n    evt.preventDefault()\r\n    if (!this.state.name) {\r\n      this.setState((prevState) => ({...prevState, isValidate: false}))\r\n    } else {\r\n      this.props.onClose()\r\n      this.props.onSubmit(this.state)\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"Modal\" onClick={this.handleOverlayClick}>\r\n        <div className=\"Modal-Wrapper\">\r\n          <div className=\"Modal-Header\">\r\n            <h2 className=\"Modal-Title\">{`${this.props.title} данных`}</h2>\r\n          </div>\r\n          <form className=\"Modal-Form\" noValidate>\r\n            <div className=\"Modal-FormWrapper\">\r\n              <div className=\"Modal-InputWrapper\">\r\n                <label className=\"Modal-Input\" htmlFor=\"name\">\r\n                  Название\r\n                </label>\r\n                <input\r\n                  id=\"name\"\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  value={this.state.name}\r\n                  onChange={this.handleInputNameChange}\r\n                  required\r\n                />\r\n                {!this.state.isValidate ? <p className=\"Modal-Error\">*Заполните имя</p> : null}\r\n              </div>\r\n              <div className=\"Modal-InputWrapper\">\r\n                <label className=\"Modal-Input\" htmlFor=\"type\">\r\n                  Тип\r\n                </label>\r\n                <select id=\"type\" type=\"text\" name=\"type\" value={this.state.type} onChange={this.handleInputTypeChange}>\r\n                  <option defaultValue value=\"main\">\r\n                    main\r\n                  </option>\r\n                  <option value=\"side\">side</option>\r\n                  <option value=\"section\">section</option>\r\n                  <option value=\"header\">header</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div className=\"Modal-ColorWrapper\">\r\n              <label className=\"Modal-Input_color\" htmlFor=\"color\">\r\n                Цвет:\r\n              </label>\r\n              <input id=\"color\" type=\"hidden\" name=\"color\" required value={this.state.color} />\r\n              <div className=\"Modal-Color\" style={{backgroundColor: `${this.state.color}`}}></div>\r\n            </div>\r\n            <SketchPicker\r\n              disableAlpha\r\n              color={this.state.color}\r\n              onChange={this.handleColorChange}\r\n              onChangeComplete={this.handleColorChangeComplete}\r\n            />\r\n            <div className=\"Modal-Actions\">\r\n              <button className=\"CommonButton\" type=\"button\" onClick={this.props.onClose}>\r\n                Отмена\r\n              </button>\r\n              <button className=\"CommonButton\" type=\"submit\" onClick={this.handleSubmitButtonClick}>\r\n                {this.props.buttonName}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport './Table.scss'\r\nimport TableRow from '../TableRow/TableRow'\r\nimport {data} from '../../data/data'\r\nimport {ascendingSort, descendingSort} from '../../utils/utils'\r\nimport Modal from '../Modal/Modal'\r\n\r\nconst TABLE_EDITOR_DATA = 'tableEditorData'\r\n\r\nexport default class Table extends React.Component {\r\n  componentDidMount() {\r\n    const data = localStorage.getItem(TABLE_EDITOR_DATA)\r\n    data && this.setState((prevState) => ({...prevState, data: JSON.parse(data).sort(ascendingSort)}))\r\n  }\r\n\r\n  state = {\r\n    data,\r\n    isSort: true,\r\n    isModalOpen: false,\r\n    editedRow: null,\r\n  }\r\n  handleRemoveButtonClick = (row) => {\r\n    const index = this.state.data.indexOf(row)\r\n    this.setState((prevState) => {\r\n      const newData = prevState.data.slice()\r\n      newData.splice(index, 1)\r\n      return {...prevState, data: newData}\r\n    })\r\n  }\r\n  handleEditButtonClick = (row) => {\r\n    const index = this.state.data.indexOf(row)\r\n    this.setState((prevState) => ({...prevState, isModalOpen: true, editedRow: prevState.data[index]}))\r\n  }\r\n  handleSaveButtonClick = () => {\r\n    localStorage.setItem(TABLE_EDITOR_DATA, JSON.stringify(this.state.data))\r\n  }\r\n  handleSortButtonClick = () => {\r\n    this.setState((prevState) => {\r\n      let data = prevState.isSort\r\n        ? prevState.data.slice().sort(descendingSort)\r\n        : prevState.data.slice().sort(ascendingSort)\r\n      return {data, isSort: !prevState.isSort}\r\n    })\r\n  }\r\n  handleOpenModal = () => {\r\n    this.setState((prevState) => ({...prevState, isModalOpen: true}))\r\n  }\r\n  handleCloseModal = () => {\r\n    this.setState((prevState) => ({...prevState, isModalOpen: false, editedRow: null}))\r\n  }\r\n  handleSubmit = (formData) => {\r\n    const {name, type, color} = formData\r\n    const newRow = {name, type, color}\r\n    this.setState((prevState) => {\r\n      if (prevState.editedRow) {\r\n        const index = this.state.data.indexOf(this.state.editedRow)\r\n        const newData = prevState.data.slice()\r\n        newData.splice(index, 1, newRow)\r\n        return {...prevState, data: newData}\r\n      } else {\r\n        const newData = prevState.data.slice()\r\n        newData.push(newRow)\r\n        newData.sort(ascendingSort)\r\n        return {...prevState, data: newData}\r\n      }\r\n    })\r\n    if (this.state.editedRow) {\r\n      const index = this.state.data.indexOf(this.state.editedRow)\r\n      this.setState((prevState) => {\r\n        const newData = prevState.data.slice()\r\n        newData.splice(index, 1)\r\n        return {...prevState, data: newData}\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"Table\">\r\n          <table className=\"Table-Content\">\r\n            <thead>\r\n              <tr className=\"Table-HeadRow\">\r\n                <th>\r\n                  <button\r\n                    className={`Table-Name ${!this.state.isSort ? 'Table-Name_unsorted' : ''}`}\r\n                    onClick={this.handleSortButtonClick}\r\n                    type=\"button\"\r\n                  >\r\n                    Название\r\n                  </button>\r\n                </th>\r\n                <th className=\"Table-Type\">Тип</th>\r\n                <th className=\"Table-Color\">Цвет</th>\r\n                <th className=\"Table-Controls\">Элементы управления</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.data.length ? (\r\n                this.state.data.map((row, index) => (\r\n                  <TableRow\r\n                    key={`${row.name}${index}`}\r\n                    name={row.name}\r\n                    type={row.type}\r\n                    color={row.color}\r\n                    onRemoveClick={() => this.handleRemoveButtonClick(row)}\r\n                    onEditClick={() => this.handleEditButtonClick(row)}\r\n                  />\r\n                ))\r\n              ) : (\r\n                <tr>\r\n                  <td className=\"Table-Empty\" colSpan=\"4\">\r\n                    Нет данных\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n          <div className=\"Table-Actions\">\r\n            <button className=\"Table-Button CommonButton\" type=\"button\" onClick={this.handleOpenModal}>\r\n              Создать запись\r\n            </button>\r\n            <button className=\"Table-Button CommonButton\" type=\"button\" onClick={this.handleSaveButtonClick}>\r\n              Сохранить\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {this.state.isModalOpen && this.state.editedRow ? (\r\n          <Modal\r\n            title=\"Изменение\"\r\n            buttonName=\"Сохранить\"\r\n            row={this.state.editedRow}\r\n            onClose={this.handleCloseModal}\r\n            onSubmit={this.handleSubmit}\r\n          />\r\n        ) : this.state.isModalOpen ? (\r\n          <Modal title=\"Добавление\" buttonName=\"Создать\" onClose={this.handleCloseModal} onSubmit={this.handleSubmit} />\r\n        ) : null}\r\n      </>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\n\nimport Table from './Table/Table'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Container\">\n        <section className=\"TableEditor\">\n          <h1 className=\"TableEditor-Title\">Табличный редактор</h1>\n          <Table />\n        </section>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie11'\nimport 'react-app-polyfill/stable'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './styles/index.scss'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}